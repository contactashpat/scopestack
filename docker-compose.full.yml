version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scopestack-postgres
    environment:
      POSTGRES_DB: scopestack
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init:/docker-entrypoint-initdb.d
    networks:
      - scopestack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: scopestack-rest/Dockerfile
    container_name: scopestack-app
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/scopestack
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scopestack-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin (Database Management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: scopestack-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@scopestack.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8081:80"
    depends_on:
      - postgres
    networks:
      - scopestack-network
    profiles:
      - tools

  # Redis (for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: scopestack-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scopestack-network
    profiles:
      - cache

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  scopestack-network:
    driver: bridge 